#!/usr/bin/env ruby
#/ usage: rbenv travis [--verbose]
#/
#/ Runs travis tests for current travis.yml.

abort "git repo is not clean" unless `git status`[/working directory clean/]
abort 'No travis config found' unless File.exists?('.travis.yml')
require 'yaml'
config = YAML.load_file '.travis.yml'
abort 'No ruby versions specified' if Array(config['rvm']).empty?

# verbose flag
@verbose = ARGV.delete('-v') || ARGV.delete('--verbose')

def say(msg)
  return unless @verbose
  puts msg
end

def ensure_bundler
  # don't use `which` since rbenv interferes if installed on one ruby version
  if `bundle 2>&1`[/command not found/]
    say "Installing bundler..."
    system 'gem install bundler'
  end
end

def to_rbenv_rubies(rubies)
  rbenv_versions = `rbenv versions --bare`.split("\n")
  rubies.map do |ruby|
    ruby_type = ruby[/[^-]+/]
    new_rubies = rbenv_versions.select {|e| e.start_with?(ruby_type) }.sort
    env = {}
    if ruby.start_with?('jruby')
      new_rubies.delete_if {|e| e.end_with?('-dev') } # not used by rvm
      env['JRUBY_OPTS'] = ruby.end_with?('-19mode') ? '--1.9' : ''
    elsif ruby.start_with?('rbx')
      env['RBXOPT'] = ruby.end_with?('-19mode') ? '-X19' : ''
    end
    new_ruby = new_rubies.last
    abort "No rbenv ruby found for ruby '#{ruby}'" unless new_ruby
    [new_ruby, env]
  end
end

def run_state(state, config)
  if config[state]
    say "Running #{state}..."
    ensure_bundler if config[state].start_with?('bundle')
    system config[state]
  end
end

# Run this once since we're not cleaning the repo between test runs
run_state 'before_install', config

rbenv_rubies = to_rbenv_rubies config['rvm']
results = rbenv_rubies.map do |ruby, env|
  ENV['RBENV_VERSION'] = ruby
  env.each {|k,v| ENV[k] = v }

  run_state 'before_script', config

  say "Running install..."
  install_cmd = 'bundle install --path bundle'
  install_cmd << ' --quiet' unless @verbose
  system install_cmd

  puts "Running tests for #{ruby}..."
  cmd = config['script'] || 'rake'
  cmd = "bundle exec #{cmd}" unless cmd.start_with?('bundle')
  result = system(cmd)
  [ruby, result]
end

puts "", "RESULTS", "*******"
results.each do |ruby, result|
  puts "#{ruby}: #{result ? 'SUCCESS' : 'FAILURE'}"
end

# cleanup bundler + anything else
say "\nCleaning up git repo:"
system('git clean -fd' + (@verbose ? '' : ' -q'))

exit 1 unless results.all? {|arr| arr[1] }
