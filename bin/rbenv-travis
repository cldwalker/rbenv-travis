#!/usr/bin/env ruby

abort "git repo is not clean" if `git status`[/Untracked files/]
abort 'No travis config found' unless File.exists?('.travis.yml')
require 'yaml'
config = YAML.load_file '.travis.yml'
abort 'No ruby versions specified' unless config['rvm']

def ensure_bundler
  # don't use `which` since rbenv interferes if installed on one ruby version
  if `bundle 2>&1`[/command not found/]
    puts "Installing bundler..."
    system 'gem install bundler'
  end
end

def to_rbenv_rubies(rubies)
  rbenv_versions = `rbenv versions --bare`.split("\n")
  rubies.map do |ruby|
    ruby_type = ruby[/[^-]+/]
    new_rubies = rbenv_versions.select {|e| e.start_with?(ruby_type) }.sort
    env = {}
    if ruby.start_with?('jruby')
      new_rubies.delete_if {|e| e.end_with?('-dev') } # not used by rvm
      env['JRUBY_OPTS'] = ruby.end_with?('-19mode') ? '--1.9' : ''
    elsif ruby.start_with?('rbx')
      env['RBXOPT'] = ruby.end_with?('-19mode') ? '-X19' : ''
    end
    new_ruby = new_rubies.last
    abort "No rbenv ruby found for ruby '#{ruby}'" unless new_ruby
    [new_ruby, env]
  end
end

# Run this once since we're not cleaning the repo between test runs
if config['before_install']
  puts "Running before_install..."
  ensure_bundler if config['before_install'].start_with?('bundle')
  system config['before_install']
end

rbenv_rubies = to_rbenv_rubies config['rvm']
results = rbenv_rubies.map do |ruby, env|
  ENV['RBENV_VERSION'] = ruby
  env.each {|k,v| ENV[k] = v }

  system "Running install..."
  system 'bundle install --path vendor'

  puts "Running tests for #{ruby}..."
  cmd = config['script'] || 'rake'
  cmd = "bundle exec #{cmd}" unless cmd.start_with?('bundle')
  result = system(cmd)
  [ruby, result]
end

puts "", "RESULTS", "*******"
results.each do |ruby, result|
  puts "#{ruby}: #{result ? 'SUCCESS' : 'FAILURE'}"
end
puts ""

# cleanup bundler + anything else
puts "Cleaning up git repo:"
system('git clean -fd')
